generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum TipoSocio {
  SOCIO
  SOCIO_FIDAL
  TESSERATO
  SOCIO_SOSTENITORE
  ADMIN
}

model Socio {
  // indici
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  email         String @unique
  codiceFiscale String @unique

  // dati anagrafici
  nome           String
  cognome        String
  luogoNascita   String?
  dataNascita    DateTime
  luogoResidenza String?
  indirizzo      String?
  cap            String?
  provincia      String?
  numeroTelefono String?

  // sicurezza
  passwordHash String
  tipoSocio    TipoSocio @default(SOCIO)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // relazioni
}

model Immagine {
  // indici
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // dati
  altText          String
  objectId         String  @unique @db.ObjectId
  includeInGallery Boolean @default(false)
  includeInSponsor Boolean @default(false)

  // sicurezza
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Articolo  Articolo[]
}

model Documento {
  // indici
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // dati
  titolo      String
  mimeType    String // final
  descrizione String?
  objectId    String  @unique @db.ObjectId //final

  // sicurezza
  tipoSociDestinatari TipoSocio[]
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Categoria {
  // indici
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // dati
  nome        String
  descrizione String?
  slug        String  @unique

  // sicurezza
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relazioni
  articoliId String[]   @db.ObjectId // array id articoli
  articoli   Articolo[] @relation(fields: [articoliId], references: [id])
}

model Articolo {
  // indici
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // dati
  titolo     String
  slug       String   @unique
  contenuto  String
  tags       String[]
  pubblicato Boolean  @default(false)

  // sicurezza
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relazioni
  immagineCopertina   Immagine    @relation(fields: [immagineCopertinaId], references: [id])
  immagineCopertinaId String      @db.ObjectId
  categorieId         String[]    @db.ObjectId // array id categorie
  categorie           Categoria[] @relation(fields: [categorieId], references: [id])
}
